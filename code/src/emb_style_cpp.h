/**
 * @file emb_style_cpp.h
 * @brief Coding style for Embedded C++ (bare-metal/RTOS/robotics)
 *
 * Supported platforms: ARM Cortex-M, RISC-V, Xtensa (ESP32), RP2040
 *
 * @version 3.3
 * @date 2025-07-07
 *
 * @copyright Copyright (c) 2025
 */

#ifndef EMB_STYLE_CPP_H
#define EMB_STYLE_CPP_H

#ifdef __cplusplus
extern "C"
{
#endif
    //==============================================================================
    // üìò –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞
    //==============================================================================

    /**
     * 1. –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è (–∏–º—è —Ñ–∞–π–ª–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≤–µ—Ä—Å–∏—è, –¥–∞—Ç–∞)
     –ü—Ä–∏–º–µ—Ä:
        * @file motor_control.c
        * @brief –î—Ä–∞–π–≤–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏ (–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä)
        * @version 1.1 (STM32F4xx HAL)
         * @date 2023-08-15
        *
        * @warning –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å DMA –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Ñ–µ—Ä–æ–≤!
        * @note –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - 1 –∫–ì—Ü

     * 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é)
    –ü—Ä–∏–º–µ—Ä:
        // === Core ===
        #include <stdint.h>
        #include "stm32f4xx_hal.h"

        // === Drivers ===
        #include "encoder.h"
        #include "pwm.h"

        // === RTOS ===
        #include "FreeRTOS.h"
        #include "task.h"

     * 3. –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    –ü—Ä–∏–º–µ—Ä:
        * typedef int16_t i16_t;
        * typedef uint32_t u32_t;
     * 4. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    –ü—Ä–∏–º–µ—Ä:
        * constexpr u16_t MAX_BUFFER_SIZE = 128;
        * constexpr u32_t TIMEOUT_MS_DEFAULT = 1000;
        * constexpr f32_t PI_CONST = 3.1415926f;
     * 5. –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π —Å doxygen –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    –ü—Ä–∏–º–µ—Ä:
        * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
        * @param pid –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º)
        * @param kp –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π [0.0 - 5.0]
        * @return HAL_StatusTypeDef –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        HAL_StatusTypeDef pid_init(pid_controller_t* pid, float kp);

     * 6. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     * 7. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
     *
     * –£–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—Ç–∞—Ü–∏–∏
     * –ü—Ä–∏–º–µ—Ä:
     * /*** –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ ***/

    //==============================================================================
    // üìö Doxygen –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    //==============================================================================

    /**
     * @brief –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è/—Ñ—É–Ω–∫—Ü–∏–∏
     *
     * –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –ü—Ä–∏–º–µ—Ä:
     * @code
     * sensor_init(&sensor_cfg);
     * @endcode
     *
     * @param[in] param1 –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     * @param[out] param2 –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     * @return err_code_t –ö–æ–¥ –æ—à–∏–±–∫–∏ (—Å–º. err_code_t)
     *
     * @note –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     * @warning –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     * @see –î—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
     */

    //==============================================================================
    // üß± Variable Naming Conventions
    //==============================================================================

    /*
     * Format:
     * [scope][description]_[type][unit]
     *
     * Scope prefixes:
     *   g_      -> global
     *   s_      -> static (module-local)
     *   m_      -> member (struct/class)
     *   ptr_    -> pointer
     *   vptr_   -> volatile pointer
     *   ref_    -> reference (C++)
     *   arr_    -> array (C++)
     *
     * Type suffixes:
     *   _u8     -> uint8_t
     *   _i8     -> int8_t
     *   _u16    -> uint16_t
     *   _i16    -> int16_t
     *   _u32    -> uint32_t
     *   _i32    -> int32_t
     *   _f32    -> float
     *   _f64    -> double
     *   _b      -> bool
     *
     *   _vu8    -> volatile u8_t
     *   _vu16   -> volatile u16_t
     *   _vu32   -> volatile u32_t
     *   _au32   -> atomic_uint
     */
    // Example:
    volatile u32_t g_system_ticks_vu32 = 0; // Volatile global (e.g., SysTick counter)
    f32_t g_battery_voltage_f32;            // Global float (accessible across modules)
    static i16_t s_error_count_i16 = 0;     // Static (file-scoped) counter
    u8_t *ptr_buffer_u8;                    // Pointer to uint8_t buffer
    pid_params_t *ptr_pid;                  // Pointer to PID struct
    volatile i16_t *vptr_sensor_data_i16;   // Pointer to volatile sensor data
    u16_t (*ptr_arr_matrix_u16)[4];         // Pointer to 4-element array of u16_t
    f32_t &ref_offset_f32 = 1.25f;          // Reference parameter
    f32_t arr_waypoints_f32[10];            // Array of waypoint coordinates

    /** Loop variables:
     *  i, j, k  -> simple loops
     *  row, col -> matrix/array loops
     *  full names -> other cases
     */
    // Example:
    for (u8_t i_u8 = 0; i_u8 < 10; i_u8++)
    { // Standard loop index
        arr_waypoints_f32[i_u8] = 0.0f;
    }

    for (u8_t row_u8 = 0; row_u8 < 4; row_u8++)
    { // Multi-Dimensional Loops
        for (u8_t col_u8 = 0; col_u8 < 4; col_u8++)
        {
            matrix[row_u8][col_u8] = 0;
        }
    }

    //==============================================================================
    // üß© –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    //==============================================================================

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

    // –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
    typedef uint8_t u8_t;   ///< Unsigned 8-bit integer   [0, 255]
    typedef int8_t i8_t;    ///< Signed 8-bit integer     [-128, 127]
    typedef uint16_t u16_t; ///< Unsigned 16-bit integer  [0, 65_535]
    typedef int16_t i16_t;  ///< Signed 16-bit integer    [-32_768, 32_767]
    typedef uint32_t u32_t; ///< Unsigned 32-bit integer  [0, 4_294_967_295]
    typedef int32_t i32_t;  ///< Signed 32-bit integer    [-2_147_483_648, 2_147_483_647]
    typedef float f32_t;    ///< 32-bit float             [~¬±1.18e‚àí38, ¬±3.4e+38] (approx)
    typedef double f64_t;   ///< 64-bit double            [~¬±2.23e‚àí308, ¬±1.79e+308] (approx)
    typedef bool b_t;       ///< Boolean                  [false, true]

    // Volatile –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏
    typedef volatile uint8_t vu8_t;
    typedef volatile uint16_t vu16_t;
    typedef volatile uint32_t vu32_t;
    typedef volatile int32_t vi32_t;

    //==============================================================================
    // üî† –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ constexpr)
    //==============================================================================

    constexpr u16_t MAX_BUFFER_SIZE = 128; // –≤–º–µ—Å—Ç–æ #define
    constexpr u32_t TIMEOUT_MS_DEFAULT = 1000;
    constexpr f32_t PI_CONST = 3.1415926f;
    constexpr f32_t DEG_TO_RAD = 0.0174533f;

    //==============================================================================
    // ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    //==============================================================================

    /// 2D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–º–º)
    typedef struct
    {
        f32_t x_mm;
        f32_t y_mm;
    } coord_2d_t;

    /// 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–º–º)
    typedef struct
    {
        f32_t x_mm;
        f32_t y_mm;
        f32_t z_mm;
    } coord_3d_t;

    /// –£–≥–ª—ã (–≥—Ä–∞–¥—É—Å—ã –∏ —Ä–∞–¥–∏–∞–Ω—ã)
    typedef struct
    {
        f32_t roll_deg;
        f32_t pitch_deg;
        f32_t yaw_deg;
    } euler_angles_t;

    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è
    typedef struct
    {
        f32_t rpm_target;
        f32_t current_limit_A;
        u8_t pwm_duty;
    } motor_params_t;

//==============================================================================
// üõ† –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä–∫–∏
//==============================================================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è
#define CHECK_NULL(ptr)    \
    do                     \
    {                      \
        if ((ptr) == NULL) \
        {                  \
            return;        \
        }                  \
    } while (0)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
#define CHECK_RANGE(val, min, max)          \
    do                                      \
    {                                       \
        if ((val) < (min) || (val) > (max)) \
        {                                   \
            return;                         \
        }                                   \
    } while (0)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ—à–∏–±–∫–∏
#define CHECK_RANGE_ERR(val, min, max, err) \
    do                                      \
    {                                       \
        if ((val) < (min) || (val) > (max)) \
        {                                   \
            return (err);                   \
        }                                   \
    } while (0)

    //==============================================================================
    // ‚è± RTOS: –∑–∞–¥–∞—á–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    //==============================================================================

    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—ç–∫–æ–≤ (–≤ —Å–ª–æ–≤–∞—Ö)
    constexpr u16_t TASK_STACK_MINIMAL = 128; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (–ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    constexpr u16_t TASK_STACK_SMALL = 256;   // –î–∞—Ç—á–∏–∫–∏, –ø—Ä–æ—Å—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    constexpr u16_t TASK_STACK_MEDIUM = 512;  // –£–º–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
    constexpr u16_t TASK_STACK_LARGE = 1024;  // –°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã/–ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    constexpr u16_t TASK_STACK_HUGE = 2048;   // –ú–∞—à–∏–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ —Ç.–ø.

    /// –®–∞–±–ª–æ–Ω –∑–∞–¥–∞—á–∏ RTOS
    void task_template(void *pvParameters)
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        (void)pvParameters; // –Ø–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–¥–∞—á–∏
        for (;;) // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ while(1)
        {
            // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            vTaskDelay(pdMS_TO_TICKS(10));
        }

        // –í –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞–µ–º
        vTaskDelete(NULL);
    }

    //==============================================================================
    // üìò –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä—É–∫—Ç—É—Ä (–¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
    //==============================================================================

    typedef struct
    {
        coord_3d_t m_position;
        euler_angles_t m_orientation;
        motor_params_t m_motors[4];
        u32_t m_update_time_ms;
    } robot_state_t;

    /// @brief –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UART
    typedef struct
    {
        u32_t m_baud_rate_u32;
        u8_t m_data_bits_u8;
        u8_t m_stop_bits_u8;
        b_t m_parity_enable_b;
    } uart_cfg_t;

    /// @brief –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞—Ç—á–∏–∫–∞
    typedef struct
    {
        f32_t m_temperature_f32_C;
        u16_t m_adc_value_u16;
        b_t m_active_b;
    } sensor_t;

    /// @brief –ü—Ä–∏–º–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    extern u8_t g_device_id_u8;
    extern b_t g_data_ready_b;

    /// @brief –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    static u8_t s_rx_buffer_u8[MAX_BUFFER_SIZE];

    //==============================================================================
    // üß† –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (ISR)
    //==============================================================================
    /*
     * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å _isr
     * - –ú–∏–Ω–∏–º—É–º –ª–æ–≥–∏–∫–∏
     * - –ù–∏–∫–∞–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
     * - –¢–æ–ª—å–∫–æ volatile –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ —Ñ–ª–∞–≥–∏
     * - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å __attribute__((interrupt)) –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */

    // –ü—Ä–∏–º–µ—Ä:
    void exti0_isr(void);

    //==============================================================================
    // ‚è± RTOS —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
    //==============================================================================
    /*
     * - enum class State_t : u8_t {} –¥–ª—è FSM
     * - –ü—Ä–µ—Ñ–∏–∫—Å—ã: task_, sem_, evt_, msg_, etc.
     * - volatile –∏ atomic –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */

    //==============================================================================
    // üßÆ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω
    //==============================================================================

    namespace hal
    {
        void gpio_write(u8_t pin, b_t value);
        b_t gpio_read(u8_t pin);
    }

    namespace ctrl
    {
        typedef struct
        {
            f32_t m_kp_f32;
            f32_t m_ki_f32;
            f32_t m_kd_f32;
            f32_t m_error_f32;
        } pid_t;

        void pid_reset(pid_t *ptr_pid);
        f32_t pid_compute(pid_t *ptr_pid, f32_t l_input_f32, f32_t l_target_f32);
    }

//==============================================================================
// ‚ö† –ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ embedded C++)
//==============================================================================
/*
 * - std::shared_ptr, std::unique_ptr
 * - std::vector, std::string
 * - new/delete
 * - –ò—Å–∫–ª—é—á–µ–Ω–∏—è (try/catch)
 * - RTTI (Run-Time Type Info)
 */

//==============================================================================
// üõ† –ü—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞
//==============================================================================
#define CHECK_NULL(ptr)    \
    do                     \
    {                      \
        if ((ptr) == NULL) \
        {                  \
            return;        \
        }                  \
    } while (0)

#ifdef __cplusplus
} // extern "C"
#endif

#endif /* EMB_STYLE_CPP_H */