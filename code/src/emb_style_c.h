/**
 * @file emb_style_c.h
 * @brief Embedded C coding style for robotics and real-time systems
 * @version 3.3
 * @date 2025-07-07
 *
 * @copyright Copyright (c) 2025
 */

#ifndef STYLE_H
#define STYLE_H

#ifdef __cplusplus
extern "C"
{
#endif
    //==============================================================================
    // üìò –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞
    //==============================================================================

    /**
     * 1. –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è (–∏–º—è —Ñ–∞–π–ª–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≤–µ—Ä—Å–∏—è, –¥–∞—Ç–∞)
     –ü—Ä–∏–º–µ—Ä:
        * @file motor_control.c
        * @brief –î—Ä–∞–π–≤–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏ (–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä)
        * @version 1.1 (STM32F4xx HAL)
         * @date 2023-08-15
        *
        * @warning –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å DMA –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Ñ–µ—Ä–æ–≤!
        * @note –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - 1 –∫–ì—Ü

     * 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é)
    –ü—Ä–∏–º–µ—Ä:
        // === Core ===
        #include <stdint.h>
        #include "stm32f4xx_hal.h"

        // === Drivers ===
        #include "encoder.h"
        #include "pwm.h"

        // === RTOS ===
        #include "FreeRTOS.h"
        #include "task.h"

     * 3. –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    –ü—Ä–∏–º–µ—Ä:
        * typedef int16_t i16_t;
        * typedef uint32_t u32_t;
     * 4. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    –ü—Ä–∏–º–µ—Ä:
        * constexpr u16_t MAX_BUFFER_SIZE = 128;
        * constexpr u32_t TIMEOUT_MS_DEFAULT = 1000;
        * constexpr f32_t PI_CONST = 3.1415926f;
     * 5. –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π —Å doxygen –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    –ü—Ä–∏–º–µ—Ä:
        * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
        * @param pid –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º)
        * @param kp –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π [0.0 - 5.0]
        * @return HAL_StatusTypeDef –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        HAL_StatusTypeDef pid_init(pid_controller_t* pid, float kp);

     * 6. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     * 7. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
     *
     * –£–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—Ç–∞—Ü–∏–∏
     * –ü—Ä–∏–º–µ—Ä:
     * /*** –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ ***/

    //==============================================================================
    // üìö Doxygen –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    //==============================================================================

    /**
     * @brief –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è/—Ñ—É–Ω–∫—Ü–∏–∏
     *
     * –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –ü—Ä–∏–º–µ—Ä:
     * @code
     * sensor_init(&sensor_cfg);
     * @endcode
     *
     * @param[in] param1 –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     * @param[out] param2 –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     * @return err_code_t –ö–æ–¥ –æ—à–∏–±–∫–∏ (—Å–º. err_code_t)
     *
     * @note –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     * @warning –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     * @see –î—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
     */

    //==============================================================================
    // üß± Variable Naming Conventions
    //==============================================================================

    /*
     * Format:
     * [scope][description]_[type][unit]
     *
     * Scope prefixes:
     *   g_      -> global
     *   s_      -> static (module-local)
     *   m_      -> member (struct/class)
     *   ptr_    -> pointer
     *   vptr_   -> volatile pointer
     *   ref_    -> reference (C++)
     *   arr_    -> array (C++)
     *
     * Type suffixes:
     *   _u8     -> uint8_t
     *   _i8     -> int8_t
     *   _u16    -> uint16_t
     *   _i16    -> int16_t
     *   _u32    -> uint32_t
     *   _i32    -> int32_t
     *   _f32    -> float
     *   _f64    -> double
     *   _b      -> bool
     *
     *   _vu8    -> volatile u8_t
     *   _vu16   -> volatile u16_t
     *   _vu32   -> volatile u32_t
     *   _au32   -> atomic_uint
     */
    // Example:
    volatile u32_t g_system_ticks_vu32 = 0; // Volatile global (e.g., SysTick counter)
    f32_t g_battery_voltage_f32;            // Global float (accessible across modules)
    static i16_t s_error_count_i16 = 0;     // Static (file-scoped) counter
    u8_t *ptr_buffer_u8;                    // Pointer to uint8_t buffer
    pid_params_t *ptr_pid;                  // Pointer to PID struct
    volatile i16_t *vptr_sensor_data_i16;   // Pointer to volatile sensor data
    u16_t (*ptr_arr_matrix_u16)[4];         // Pointer to 4-element array of u16_t
    f32_t &ref_offset_f32 = 1.25f;          // Reference parameter
    f32_t arr_waypoints_f32[10];            // Array of waypoint coordinates

    /** Loop variables:
     *  i, j, k  -> simple loops
     *  row, col -> matrix/array loops
     *  full names -> other cases
     */
    // Example:
    for (u8_t i_u8 = 0; i_u8 < 10; i_u8++)
    { // Standard loop index
        arr_waypoints_f32[i_u8] = 0.0f;
    }

    for (u8_t row_u8 = 0; row_u8 < 4; row_u8++)
    { // Multi-Dimensional Loops
        for (u8_t col_u8 = 0; col_u8 < 4; col_u8++)
        {
            matrix[row_u8][col_u8] = 0;
        }
    }

    //==============================================================================
    // üß© –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è
    //==============================================================================

#include <stdint.h>
#include <stdbool.h>
#include <stdatomic.h>

    // –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
    typedef uint8_t u8_t;   ///< Unsigned 8-bit integer   [0, 255]
    typedef int8_t i8_t;    ///< Signed 8-bit integer     [-128, 127]
    typedef uint16_t u16_t; ///< Unsigned 16-bit integer  [0, 65_535]
    typedef int16_t i16_t;  ///< Signed 16-bit integer    [-32_768, 32_767]
    typedef uint32_t u32_t; ///< Unsigned 32-bit integer  [0, 4_294_967_295]
    typedef int32_t i32_t;  ///< Signed 32-bit integer    [-2_147_483_648, 2_147_483_647]
    typedef float f32_t;    ///< 32-bit float             [~¬±1.18e‚àí38, ¬±3.4e+38] (approx)
    typedef double f64_t;   ///< 64-bit double            [~¬±2.23e‚àí308, ¬±1.79e+308] (approx)
    typedef bool b_t;       ///< Boolean                  [false, true]

    // –ü–µ—Ä–∏—Ñ–µ—Ä–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä—ã
    typedef volatile u8_t vu8_t;   ///< Volatile 8-bit
    typedef volatile u16_t vu16_t; ///< Volatile 16-bit
    typedef volatile u32_t vu32_t; ///< Volatile 32-bit
    typedef atomic_uint au32_t;    ///< Atomic 32-bit

    // –ë–∏—Ç–æ–≤—ã–µ –ø–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
    typedef union
    {
        u32_t word;
        struct
        {
            u32_t enable : 1;
            u32_t mode : 2;
            u32_t : 5; // Reserved
        } bits;
    } ctrl_reg_t;

    //==============================================================================
    // ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞: —Ç–∏–ø—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    //==============================================================================

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
    typedef struct
    {
        f32_t x_mm;      ///< –ü–æ–∑–∏—Ü–∏—è –ø–æ X (–º–º)
        f32_t y_mm;      ///< –ü–æ–∑–∏—Ü–∏—è –ø–æ Y (–º–º)
        f32_t theta_rad; ///< –£–≥–æ–ª (—Ä–∞–¥)
    } pose2d_t;

    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
    typedef struct
    {
        f32_t kp;             ///< –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        f32_t ki;             ///< –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        f32_t kd;             ///< –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        f32_t integral_limit; ///< –õ–∏–º–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
    } pid_params_t;

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    static const f32_t WHEEL_DIAMETER_MM = 65.0f;     ///< –î–∏–∞–º–µ—Ç—Ä –∫–æ–ª–µ—Å–∞
    static const f32_t ENCODER_PPR = 1024.0f;         ///< –ò–º–ø—É–ª—å—Å–æ–≤ –Ω–∞ –æ–±–æ—Ä–æ—Ç
    static const f32_t ROBOT_MAX_SPEED_MMPS = 500.0f; ///< –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å (–º–º/—Å)

//==============================================================================
// üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
//==============================================================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è
#define CHECK_NULL(ptr)          \
    do                           \
    {                            \
        if (!(ptr))              \
            return ERR_NULL_PTR; \
    } while (0)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
#define CHECK_ALIGN(ptr, align)         \
    do                                  \
    {                                   \
        if ((uintptr_t)(ptr) % (align)) \
            return ERR_ALIGN;           \
    } while (0)

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ volatile
#define VOL_ACCESS(addr) (*(volatile typeof(addr) *)&(addr))

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
#define CLAMP(val, min, max) \
    ((val) < (min) ? (min) : ((val) > (max) ? (max) : (val)))

    //==============================================================================
    // ‚è± RTOS –∏ –∑–∞–¥–∞—á–∏
    //==============================================================================

    /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á FreeRTOS
    typedef enum
    {
        TASK_PRIO_IDLE = 0,   ///< –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        TASK_PRIO_LOW = 1,    ///< –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        TASK_PRIO_NORMAL = 3, ///< –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        TASK_PRIO_HIGH = 5,   ///< –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    } task_prio_t;

    /// –®–∞–±–ª–æ–Ω –∑–∞–¥–∞—á–∏ RTOS
    void task_template(void *params)
    {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        (void)params; // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

        // 2. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        for (;;)
        {
            // –õ–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏
            vTaskDelay(pdMS_TO_TICKS(10));
        }

        // 3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—Ç—å—Å—è)
        vTaskDelete(NULL);
    }

    //==============================================================================
    // ‚ö† –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    //==============================================================================

    /// –ö–æ–¥—ã –æ—à–∏–±–æ–∫
    typedef enum
    {
        ERR_OK = 0,      ///< –£—Å–ø–µ—Ö
        ERR_INVALID_ARG, ///< –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        ERR_TIMEOUT,     ///< –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        ERR_HW_FAULT,    ///< –ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
        ERR_BUSY,        ///< –†–µ—Å—É—Ä—Å –∑–∞–Ω—è—Ç
        ERR_NOT_INIT     ///< –ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    } err_code_t;

/// –ú–∞–∫—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
#define RETURN_IF_ERR(expr)        \
    do                             \
    {                              \
        err_code_t __err = (expr); \
        if (__err != ERR_OK)       \
            return __err;          \
    } while (0)

//==============================================================================
// üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (ISR)
//==============================================================================

// –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–≤
#ifdef __GNUC__
#define ISR_ATTR __attribute__((interrupt))
#else
#define ISR_ATTR
#endif

    /// –®–∞–±–ª–æ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    void TIM2_IRQHandler(void) ISR_ATTR
    {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        // 2. –û—á–∏—Å—Ç–∫–∞ —Ñ–ª–∞–≥–æ–≤
        // 3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        // 4. –í—ã—Ö–æ–¥
    }

    //==============================================================================
    // üìä –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    //==============================================================================

    /**
     * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è
     * @param[in] cfg –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è
     * @param[out] handle –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ handle
     * @return err_code_t –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     *
     * @warning –ù–µ –≤—ã–∑—ã–≤–∞—Ç—å –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PWM!
     */
    err_code_t motor_init(const motor_cfg_t *cfg, motor_handle_t *handle)
    {
        CHECK_NULL(cfg);
        CHECK_NULL(handle);

        // ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

        return ERR_OK;
    }

#ifdef __cplusplus
}
#endif

#endif /* STYLE_H */